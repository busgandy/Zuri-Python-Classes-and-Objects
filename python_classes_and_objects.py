# -*- coding: utf-8 -*-
"""Python-Classes-and-Objects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11jkDtb3E_K_cdTtqZd2Nfze8g4VPzO9c

**Python: Classes and Objects**
"""

# Creating the class "Budget"
class Budget:
    # Calling the __init__ method
    def __init__(self, food=10, clothing=10, entertainment=10):
        # Creating the class variables as Category
        self.food = food
        self.clothing = clothing
        self.entertainment = entertainment

    # Creating the Instance Methods
    def deposit(self):
        print("================================")
        print("WELCOME TO DEPOSIT")
        print("================================")

        # Check to ensure user input is an integer
        while True:
            try:
                deposit_input = int(input("WHICH CATEGORY WOULD YOU LIKE TO DEPOSIT IN?\n"
                                          "(1). FOOD \n"
                                          "(2). CLOTHING \n"
                                          "(3). ENTERTAINMENT \n"
                                          ))
                break
            except ValueError:
                print("Oops!  That was no valid number.  Try again... \n")

        if deposit_input == 1:
            while True:
                try:
                    deposit_amount_input = int(input("HOW MUCH WOULD YOU LIKE TO DEPOSIT INTO YOUR FOOD CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.food += deposit_amount_input
            print("================================")
            print(f"YOU JUST DEPOSITED #{deposit_amount_input} INTO YOUR FOOD CATEGORY")
            print("================================")
        elif deposit_input == 2:
            while True:
                try:
                    deposit_amount_input = int(
                        input("HOW MUCH WOULD YOU LIKE TO DEPOSIT INTO YOUR CLOTHING CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.clothing += deposit_amount_input
            print("================================")
            print(f"YOU JUST DEPOSITED #{deposit_amount_input} INTO YOUR CLOTHING CATEGORY")
            print("================================")

        elif deposit_input == 3:
            while True:
                try:
                    deposit_amount_input = int(
                        input("HOW MUCH WOULD YOU LIKE TO DEPOSIT INTO YOUR ENTERTAINMENT CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.entertainment += deposit_amount_input
            print("================================")
            print(f"YOU JUST DEPOSITED #{deposit_amount_input} INTO YOUR ENTERTAINMENT CATEGORY")
            print("================================")
        else:
          print("THAT WAS NOT IN THE CATEGORY")



    def withdraw(self):
        print("================================")
        print("WELCOME TO WITHDRAW")
        print("================================")

        while True:
            try:
                withdrawal_input = int(input("WHICH CATEGORY WOULD YOU LIKE TO WITHDRAW FROM?\n"
                                             "(1). FOOD \n"
                                             "(2). CLOTHING \n"
                                             "(3). ENTERTAINMENT \n"
                                             ))

                break
            except ValueError:
                print("Oops!  That was no valid number.  Try again... \n")

        if withdrawal_input == 1:
            while True:
                try:
                    withdrawal_amount_input = int(
                        input("HOW MUCH WOULD YOU LIKE TO WITHDRAW IN YOUR FOOD CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.food -= withdrawal_amount_input
            print("================================")
            print(f"YOU JUST WITHDREW #{withdrawal_amount_input} IN YOUR FOOD CATEGORY")
            print("================================")

        elif withdrawal_input == 2:
            while True:
                try:
                    withdrawal_amount_input = int(
                        input("HOW MUCH WOULD YOU LIKE TO WITHDRAW TO YOUR CLOTHING CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.clothing -= withdrawal_amount_input
            print("================================")
            print(f"YOU JUST WITHDREW #{withdrawal_amount_input} TO YOUR CLOTHING CATEGORY")
            print("================================")

        elif withdrawal_input == 3:
            while True:
                try:
                    withdrawal_amount_input = int(
                        input("HOW MUCH WOULD YOU LIKE TO WITHDRAW TO YOUR ENTERTAINMENT CATEGORY? \n"))
                    break
                except ValueError:
                    print("Oops!  That was no valid number.  Try again... \n")

            self.entertainment -= withdrawal_amount_input
            print("================================")
            print(f"YOU JUST WITHDREW #{withdrawal_amount_input} TO YOUR ENTERTAINMENT CATEGORY")
            print("================================")

    def transfer(self):
        while True:
            try:
                transfer_input = int(input("WHICH CATEGORY WOULD YOU LIKE TO TRANSFER FROM?\n"
                                           "(1). FOOD \n"
                                           "(2). CLOTHING \n"
                                           "(3). ENTERTAINMENT \n"
                                           ))

                break
            except ValueError:
                print("Oops!  That was no valid number.  Try again... \n")

        print("THE TOTAL AMOUNT IN YOUR CATEGORY IS: \n")
        budget.check_balance()
        print("================================")

        while True:

            try:
                input_transfer = int(input("WHICH CATEGORY WOULD YOU LIKE TO TRANSFER INTO?\n"
                                           "(1). FOOD \n"
                                           "(2). CLOTHING \n"
                                           "(3). ENTERTAINMENT \n"
                                           ))
                break
            except ValueError:
                print("Oops!  That was no valid number.  Try again... \n")

        while True:
            try:
                transfer_amount = int(input("HOW MUCH WOULD YOU LIKE TO TRANSFER: \n"))
                break
            except ValueError:
                print("Oops!  That was no valid number.  Try again... \n")

        if transfer_input == 1 and input_transfer == 2:
            self.clothing += transfer_amount
            self.food -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM FOOD TO CLOTHING CATEGORY")
        elif transfer_input == 1 and input_transfer == 3:
            self.entertainment += transfer_amount
            self.food -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM FOOD TO ENTERTAINMENT CATEGORY")
        elif transfer_input == 2 and input_transfer == 1:
            self.food += transfer_amount
            self.clothing -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM CLOTHING TO FOOD CATEGORY")
        elif transfer_input == 2 and input_transfer == 3:
            self.entertainment += transfer_amount
            self.clothing -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM CLOTHING TO ENTERTAINMENT CATEGORY")
        elif transfer_input == 3 and input_transfer == 1:
            self.food += transfer_amount
            self.entertainment -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM ENTERTAINMENT TO FOOD CATEGORY")
        elif transfer_input == 3 and input_transfer == 2:
            self.clothing += transfer_amount
            self.entertainment -= transfer_amount
            print(f"YOU JUST TRANSFERRED #{transfer_amount} FROM ENTERTAINMENT TO CLOTHING CATEGORY")
        else:
            print("INVALID TRANSFER, TRY AGAIN. \n PLEASE NOTE THAT YOU CAN NOT TRANSFER FROM THE SAME CATEGORY \n")

    def check_balance(self):
        print(f"YOUR BALANCE IS:\n"
              f"(1). FOOD = #{self.food} \n"
              f"(2). CLOTHING = #{self.clothing} \n"
              f"(2). ENTERTAINMENT = #{self.entertainment} \n \n"
              f" TOTAL BALANCE IN CATEGORY IS: #{self.clothing + self.food + self.entertainment} \n"
              )


# instantiating the class
budget = Budget()

task_force = True
# A loop to run the code as long as any other number is inputed by the user.
while task_force:
    while True:
        try:
            decision_input = int(input("WHAT WOULD YOU LIKE TO DO?\n"
                                       "(1). DEPOSIT \n"
                                       "(2). WITHDRAW \n"
                                       "(3). TRANSFER\n"
                                       "(4). CHECK BALANCE\n"
                                       "PRESS ANY OTHER KEY TO LOGOUT "
                                       ))
            break
        except ValueError:
            print("Oops!  That was no valid number.  Try again... \n")

    if decision_input == 1:
        budget.deposit()
        budget.check_balance()

    elif decision_input == 2:
        budget.withdraw()
        budget.check_balance()

    elif decision_input == 3:
        budget.transfer()
        budget.check_balance()

    elif decision_input == 4:
        print("================================")
        print("WELCOME TO CHECK BALANCE")
        print("================================")
        budget.check_balance()
    else:
        task_force = False